public static class ConePositionPipeline extends OpenCvPipeline {
    // ... (existing code)

    Interpreter tflite  ;

    // Load the TensorFlow Lite model from the assets folder
    private void loadModel() {
        try {
            ByteBuffer model = FileUtil.loadMappedFile(this.activity, "blue1.tflite");
            Interpreter.Options options = new Interpreter.Options();
            tflite = new Interpreter(model, options);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void init(Mat firstFrame) {
        inputToCb(firstFrame);

        regionCb = Cb.submat(new Rect(REGION_TOP_LEFT, new Point(
            REGION_TOP_LEFT.x + REGION_WIDTH, REGION_TOP_LEFT.y + REGION_HEIGHT
        )));

        // Load the TensorFlow Lite model when the pipeline is initialized
        loadModel();
    }

    @Override
    public Mat processFrame(Mat input) {
        inputToCb(input);

        Imgproc.rectangle(
            input, REGION_TOP_LEFT, new Point(
                REGION_TOP_LEFT.x + REGION_WIDTH,
                REGION_TOP_LEFT.y + REGION_HEIGHT
            ), GREEN, 2
        );

        // Convert the regionCb to a ByteBuffer (modify as needed based on your model's input details)
        ByteBuffer imgData = convertMatToByteBuffer(regionCb);

        // Run inference using TensorFlow Lite
        float[] output = new float[numClasses]; // Modify based on the number of classes in your model
        tflite.run(imgData, output);

        // Process the output array to determine cone position
        conePosition = processOutput(output);

        return input;
    }

    // ... (helper methods, such as convertMatToByteBuffer and processOutput)
}
